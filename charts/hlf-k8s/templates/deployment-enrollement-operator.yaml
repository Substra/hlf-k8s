# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if index .Values "hlf-ca" "enabled" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-enrollment-operator
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-enrollment-operator
        app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-enrollment-operator
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "substra.fullname" . }}
      containers:
        - name: fabric-tools
          image: {{ index $.Values "fabric-tools" "image" "repository" }}:{{ index $.Values "fabric-tools" "image" "tag" }}
          imagePullPolicy: "{{ index $.Values "fabric-tools" "image" "pullPolicy" }}"
          command: ['sh', '-c']
          args:
            - |
              ## Update CA certs
              update-ca-certificates

              ## Check connection with the Certificate Authority
              printf "[DEBUG] Testing the connection with this node's Certificate Authority ({{ index .Values "hlf-ca" "scheme" }}://{{ index .Values "hlf-ca" "host" }}:{{ index .Values "hlf-ca" "port" }})\n"
              until fabric-ca-client getcainfo -u {{ index .Values "hlf-ca" "scheme" }}://{{ index .Values "hlf-ca" "host" }}:{{ index .Values "hlf-ca" "port" }}; do
                printf "[DEBUG] Certificate Authority ({{ index .Values "hlf-ca" "scheme" }}://{{ index .Values "hlf-ca" "host" }}:{{ index .Values "hlf-ca" "port" }}) server is not reacheable, retry in 5s\n"
                sleep 5
              done

              ## Enroll CA administrator
              printf "[DEBUG] Testing enrollment of CA admin\n"
              until fabric-ca-client identity list -u {{ index .Values "hlf-ca" "scheme" }}://{{ index .Values "hlf-ca" "adminUsername" }}:{{ index .Values "hlf-ca" "adminPassword" }}@{{ index .Values "hlf-ca" "host" }}:{{ index .Values "hlf-ca" "port" }} --id {{ index .Values "hlf-ca" "adminUsername" }}; do
                printf "[DEBUG] Certificate Authority admin is not enrolled, enrolling it now:\n"
                fabric-ca-client enroll -d -u {{ index .Values "hlf-ca" "scheme" }}://{{ index .Values "hlf-ca" "adminUsername" }}:{{ index .Values "hlf-ca" "adminPassword" }}@{{ index .Values "hlf-ca" "host" }}:{{ index .Values "hlf-ca" "port" }} -M /var/hyperledger/fabric-ca/msp
                sleep 1
              done

              ## Create CA cert kubernetes secret
              ## Note: The CA cert is shared between all identities (CA admin, admins, and users)
              until kubectl get secret {{ .Values.secrets.caCert }} > /dev/null; do
                printf "[DEBUG] CA cacerts k8s secret not found, creating it now:\n"
                kubectl create secret generic {{ .Values.secrets.caCert }} --from-file=cacert.pem=$(find /var/hyperledger/fabric-ca/msp/cacerts -type f)
                sleep 1
              done

              ## Check connection with the Orderer Certificate Authority
              printf "[DEBUG] Testing the connection with the Orderer Certificate Authority ({{ index .Values "hlf-ca" "orderer" "scheme" }}://{{ index .Values "hlf-ca" "orderer" "host" }}:{{ index .Values "hlf-ca" "orderer" "port"}})\n"
              until fabric-ca-client getcainfo -u {{ index .Values "hlf-ca" "orderer" "scheme" }}://{{ index .Values "hlf-ca" "orderer" "host" }}:{{ index .Values "hlf-ca" "orderer" "port" }} -H /tmp/orderer; do
                printf "[DEBUG] Orderer Certificate Authority ({{ index .Values "hlf-ca" "orderer" "scheme" }}://{{ index .Values "hlf-ca" "orderer" "host" }}:{{ index .Values "hlf-ca" "orderer" "port"}}) server is not reacheable, retry in 5s\n"
                sleep 5
              done

              ## Create Orderer CA Cert kubernetes secret
              until kubectl get secret {{ .Values.secrets.ordTlsRootCert }} > /dev/null; do
                printf "[DEBUG] Orderer CA cacerts k8s secret not found, creating it now:\n"
                kubectl create secret generic {{ .Values.secrets.ordTlsRootCert }} --from-file=cacert.pem=$(find /tmp/orderer/msp/cacerts -type f)
                sleep 1
              done

              ## Enroll users
              while true; do

                while IFS=" " read -r name secret options; do

                  printf "[DEBUG] Checking enrollment of CA user $name\n"

                  ## Register user
                  until fabric-ca-client identity list -u {{ index .Values "hlf-ca" "scheme" }}://{{ index .Values "hlf-ca" "adminUsername" }}:{{ index .Values "hlf-ca" "adminPassword" }}@{{ index .Values "hlf-ca" "host" }}:{{ index .Values "hlf-ca" "port" }} --id $name; do
                    printf "[DEBUG] User $name is not registered, registering the user now:\n"
                    fabric-ca-client register -d -u {{ index .Values "hlf-ca" "scheme" }}://{{ index .Values "hlf-ca" "adminUsername" }}:{{ index .Values "hlf-ca" "adminPassword" }}@{{ index .Values "hlf-ca" "host" }}:{{ index .Values "hlf-ca" "port" }} --id.name $name --id.secret $secret $options
                    sleep 1
                  done

                  ## Enroll user (MSP)
                  until [ -d "/data/$name/msp" ]; do
                    printf "[DEBUG] MSP certificate not found: enrolling user '$name' now:\n"
                    fabric-ca-client enroll -d -u {{ index .Values "hlf-ca" "scheme" }}://$name:$secret@{{ index .Values "hlf-ca" "host" }}:{{ index .Values "hlf-ca" "port" }} -M /data/$name/msp
                    sleep 1
                  done

                  ## Enroll user (TLS)
                  until [ -d "/data/$name/tls" ]; do
                    printf "[DEBUG] TLS certificate not found: enrolling user '$name' with TLS profile now:\n"
                    fabric-ca-client enroll -d --enrollment.profile tls -u {{ index .Values "hlf-ca" "scheme" }}://$name:$secret@{{ index .Values "hlf-ca" "host" }}:{{ index .Values "hlf-ca" "port" }} -M /data/$name/tls --csr.hosts "localhost,127.0.0.1,{{ .Values.enrollments.csrHost }}"
                    sleep 1
                  done

                  ## Create secret: MSP cert
                  until kubectl get secret hlf-msp-cert-$name > /dev/null; do
                    printf "[DEBUG] User '$name' 'MSP cert' secret not found, creating it now:\n"
                    kubectl create secret generic hlf-msp-cert-$name --from-file=cert.pem=/data/$name/msp/signcerts/cert.pem
                    sleep 1
                  done

                  ## Create secret: MSP key
                  until kubectl get secret hlf-msp-key-$name > /dev/null; do
                    printf "[DEBUG] User '$name' 'MSP key' secret not found, creating it now:\n"
                    kubectl create secret generic hlf-msp-key-$name --from-file=key.pem=$(find /data/$name/msp/keystore -type f)
                    sleep 1
                  done

                  ## Create secret: TLS pair
                  until kubectl get secret hlf-tls-$name > /dev/null; do
                    printf "[DEBUG] User '$name' 'TLS pair' secret not found, creating it now:\n"
                    kubectl create secret tls hlf-tls-$name --key $(find /data/$name/tls/keystore -type f) --cert /data/$name/tls/signcerts/cert.pem
                    sleep 1
                  done

                done < /config/enrollments

                sleep 10
              done
          resources:
            {{- toYaml .Values.resources | nindent 14 }}
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric
              name: fabric-config
              readOnly: true
            - mountPath: /config
              name: enrollment
              readOnly: true
            - mountPath: /data
              name: data
            {{- if .Values.privateCa.enabled }}
            - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
              name: private-ca
              subPath: {{ .Values.privateCa.configMap.fileName }}
            {{- end }}
      volumes:
        - name: fabric-config
          configMap:
            name: {{ template "substra.fullname" . }}-fabric
        - name: enrollment
          configMap:
            name: {{ template "substra.fullname" . }}-enrollment
        - name: data
          emptyDir: {}
        {{- if .Values.privateCa.enabled }}
        - name: private-ca
          configMap:
            name: {{ .Values.privateCa.configMap.name }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end}}
