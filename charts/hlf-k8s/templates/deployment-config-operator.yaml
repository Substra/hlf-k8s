# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if index .Values "hlf-peer" "enabled" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-config-operator
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-config-operator
        app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-config-operator
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "substra.fullname" . }}
      {{- if index $.Values "fabric-tools" "image" "pullImageSecret" }}
      imagePullSecrets:
        - name: {{ index $.Values "fabric-tools" "image" "pullImageSecret" }}
      {{- end }}
      containers:
        - name: fabric-tools
          image: {{ index $.Values "fabric-tools" "image" "repository" }}:{{ index $.Values "fabric-tools" "image" "tag" }}
          imagePullPolicy: "{{ index $.Values "fabric-tools" "image" "pullPolicy" }}"
          command: ['sh', '-c']
          args:
            - |
              ## Create configuration files (public keys) for the organization
              while true; do

                until [ -f "/data/configOrg.json" ]; do
                  printf "[DEBUG] Create the organization config file\n"
                  configtxgen -printOrg {{ .Values.organization.name }} > /data/configOrg.json
                  sleep 1
                done

                until [ -f "/data/configOrgWithAnchors.json" ]; do
                  printf "[DEBUG] Create the org config anchor file\n"
                  jq -s '.[0] * {"values":{"AnchorPeers":{"mod_policy":"Admins", "value":{"anchor_peers":[{"host":"{{ index .Values "hlf-peer" "host" }}", "port":"{{ index .Values "hlf-peer" "port" }}"}]}, "version": "0"}}}' /data/configOrg.json > /data/configOrgWithAnchors.json
                  sleep 1
                done

                sleep 10
              done
          resources:
            {{- toYaml .Values.resources | nindent 14 }}
          env:
          - name: CORE_PEER_MSPCONFIGPATH
            value: /var/hyperledger/admin_msp
          - name: GODEBUG
            value: "netdns=go+1"
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric
              name: fabric-config
              readOnly: true
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /var/hyperledger/tls/ord/cert
              name: ord-tls-rootcert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/keystore
              name: admin-key
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /data
              name: data
            {{- if .Values.privateCa.enabled }}
            - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
              name: private-ca
              subPath: {{ .Values.privateCa.configMap.fileName }}
            {{- end }}
        - name: nginx
          image: nginx:1.17.6
          ports:
          - containerPort: 80
          volumeMounts:
            - mountPath: /usr/share/nginx/html/config
              name: data
      volumes:
        - name: fabric-config
          configMap:
            name: {{ template "substra.fullname" . }}-fabric
        - name: id-cert
          secret:
            secretName: {{ .Values.secrets.cert }}
        - name: id-key
          secret:
            secretName: {{ .Values.secrets.key }}
        - name: cacert
          secret:
            secretName: {{ .Values.secrets.caCert }}
        - name: tls
          secret:
            secretName: {{ .Values.secrets.tls }}
        - name: tls-rootcert
          secret:
            secretName: {{ .Values.secrets.tlsRootCert }}
        - name: tls-client
          secret:
            secretName: {{ .Values.secrets.tlsClient }}
        - name: tls-clientrootcert
          secret:
            secretName: {{ .Values.secrets.tlsClientRootCert }}
        - name: admin-cert
          secret:
            secretName: {{ .Values.secrets.adminCert }}
        - name: admin-key
          secret:
            secretName: {{ .Values.secrets.adminKey }}
        - name: ord-tls-rootcert
          secret:
            secretName: {{ .Values.secrets.ordTlsRootCert }}
        - name: data
          emptyDir: {}
        {{- if .Values.privateCa.enabled }}
        - name: private-ca
          configMap:
            name: {{ .Values.privateCa.configMap.name }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "substra.fullname" . }}-config-operator
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" . }}
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/name: {{ template "substra.name" . }}-config-operator
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}
