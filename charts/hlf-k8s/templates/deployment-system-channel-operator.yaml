# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if index .Values "hlf-ord" "enabled" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-system-channel-operator
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-system-channel-operator
        app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-system-channel-operator
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "substra.fullname" . }}
      {{- if index $.Values "fabric-tools" "image" "pullImageSecret" }}
      imagePullSecrets:
        - name: {{ index $.Values "fabric-tools" "image" "pullImageSecret" }}
      {{- end }}
      containers:
      - name: fabric-tools
        image: {{ index $.Values "fabric-tools" "image" "repository" }}:{{ index $.Values "fabric-tools" "image" "tag" }}
        imagePullPolicy: "{{ index $.Values "fabric-tools" "image" "pullPolicy" }}"
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            ## Check connection with the Orderer
            printf "[DEBUG] Testing the connection with the Orderer ({{ index .Values "hlf-ord" "host" }}:{{ index .Values "hlf-ord" "port" }})\n"
            until $(nc -z {{ index .Values "hlf-ord" "host" }} {{ index .Values "hlf-ord" "port" }}); do
              printf "[DEBUG] Orderer ({{ index .Values "hlf-ord" "host" }}:{{ index .Values "hlf-ord" "port" }}) is not reacheable, retry in 5s\n"
              sleep 5
            done

            ## Add orgs to the system channel
            while true; do

              printf "[DEBUG] Creating updates for system channel ({{ .Values.systemChannel.name }})\n"

              while IFS=" " read -r org mspid configUrl ; do

                ## Delete stale channel configuration files
                rm -rf \
                  channel.block \
                  channel-cfg.block \
                  channel-cfg.json

                ## Fetch system channel configuration block
                until [ -f "channel.block" ] && [ -s "channel.block" ]; do
                  printf "[DEBUG] Fetching the system channel ({{ .Values.systemChannel.name }}) configuration block\n"

                  peer channel fetch config channel.block \
                    -c {{ .Values.systemChannel.name }} \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o {{ index .Values "hlf-ord" "host" }}:{{ index .Values "hlf-ord" "port" }} > /tmp/out.txt 2>&1 || cat /tmp/out.txt

                  sleep 3
                done

                ## Check if update has been already sent
                printf "[DEBUG] Check whether '$org' is in the system channel:\n"
                configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-$org-hasjoined.json
                if grep "$mspid" channel-$org-hasjoined.json > /dev/null; then
                  printf "[DEBUG] $org is already in the system channel\n"
                  sleep 5
                  continue
                else
                  printf "[DEBUG] $org is not in the system channel\n"
                  ## Remove all configuration files because of edge cases (network issue, proposal issue).
                  ## We prefer to delete all and retry all steps to avoid side effects.
                  rm -f *-$org.*
                fi

                ## Extract system channel configuration
                until [ -f "channel-cfg.block" ] && [ -s "channel-cfg.block" ]; do
                  printf "[DEBUG] Extract the system channel configuration part\n"
                  configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-cfg.json
                  configtxlator proto_encode --input channel-cfg.json --type common.Config --output channel-cfg.block
                  sleep 2
                done

                ## Fetch organization configuration
                until [ -f "configOrg-$org.json" ] && [ -s "configOrg-$org.json" ]; do
                  printf "[DEBUG] Fetch the organization ($org) configuration from $configUrl\n"
                  curl --fail -L --output ./configOrg-$org.json $configUrl
                  sleep 3
                done

                ## Create proposal
                until [ -f "proposal-$org.pb" ]; do
                  printf "[DEBUG] Create system channel update proposal for $org\n"

                  ## Add organization to consortium
                  jq -s '.[0] * {"channel_group":{"groups":{"Consortiums":{"groups":{"SampleConsortium":{"groups":{"'$org'":.[1]}}}}}}}' channel-cfg.json configOrg-$org.json > channelconfigUpdated-$org.json
                  configtxlator proto_encode --input channelconfigUpdated-$org.json --type common.Config --output channelupdate-$org.block

                  ## Compute update between channel old configuration and the updated one
                  configtxlator compute_update --channel_id {{ .Values.systemChannel.name }} --original channel-cfg.block --updated channelupdate-$org.block | configtxlator proto_decode --type common.ConfigUpdate | jq . > compute_update-$org.json

                  ## Create update proposal
                  echo '{"payload":{"header":{"channel_header":{"channel_id": "{{ .Values.systemChannel.name }}", "type":2}},"data":{"config_update":'$(cat compute_update-$org.json)'}}}' | jq . > proposal-$org.json
                  configtxlator proto_encode --input proposal-$org.json --type common.Envelope --output proposal-$org.pb

                  sleep 2
                done

                ## Submit proposal
                until $(grep "$org" channelconfignew-$org.json > /dev/null 2> /dev/null); do

                  printf "[DEBUG] Send system channel update proposal for $org\n"

                  peer channel update -f proposal-$org.pb \
                    -c {{ .Values.systemChannel.name }} \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o {{ index .Values "hlf-ord" "host" }}:{{ index .Values "hlf-ord" "port" }}

                  sleep 2

                  printf "[DEBUG] Fetch system channel configuration to check the update for $org\n"

                  peer channel fetch config channelnew-$org.block \
                    -c {{ .Values.systemChannel.name }} \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o {{ index .Values "hlf-ord" "host" }}:{{ index .Values "hlf-ord" "port" }} > /tmp/out.txt 2>&1 || cat /tmp/out.txt

                  configtxlator proto_decode --input channelnew-$org.block --type common.Block | jq .data.data[0].payload.data.config > channelconfignew-$org.json

                  sleep 5
                done

              done < /config/system-organizations

              sleep 10
            done
        resources:
          {{- toYaml .Values.resources | nindent 14 }}
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        - name: GODEBUG
          value: "netdns=go+1"
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /config
            name: system-organizations
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
          {{- if .Values.privateCa.enabled }}
          - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
            name: private-ca
            subPath: {{ .Values.privateCa.configMap.fileName }}
          {{- end }}
      volumes:
        - name: system-organizations
          configMap:
            name: {{ template "substra.fullname" . }}-system-organizations
        - name: fabric-config
          configMap:
            name: {{ template "substra.fullname" . }}-fabric
        - name: id-cert
          secret:
            secretName: {{ index .Values "hlf-ord" "secrets" "ord" "cert" }}
        - name: id-key
          secret:
            secretName: {{ index .Values "hlf-ord" "secrets" "ord" "key" }}
        - name: cacert
          secret:
            secretName: {{ index .Values "hlf-ord" "secrets" "ord" "caCert" }}
        - name: tls
          secret:
            secretName: {{ index .Values "hlf-ord" "secrets" "ord" "tls" }}
        - name: tls-rootcert
          secret:
            secretName: {{ index .Values "hlf-ord" "secrets" "ord" "tlsRootCert" }}
        - name: tls-client
          secret:
            secretName: {{ index .Values "hlf-ord" "secrets" "ord" "tlsClient" }}
        - name: tls-clientrootcert
          secret:
            secretName: {{ index .Values "hlf-ord" "secrets" "ord" "tlsClientRootCert" }}
        - name: admin-cert
          secret:
            secretName: {{ index .Values "hlf-ord" "secrets" "adminCert" }}
        - name: admin-key
          secret:
            secretName: {{ index .Values "hlf-ord" "secrets" "adminKey" }}
        {{- if .Values.privateCa.enabled }}
        - name: private-ca
          configMap:
            name: {{ .Values.privateCa.configMap.name }}
        {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
---
{{- end }}
