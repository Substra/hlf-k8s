{{- if .Values.orderer.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-system-channel-operator
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-system-channel-operator
        app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-system-channel-operator
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "substra.fullname" . }}
      containers:
      - name: fabric-tools
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            ## Check connection with the Orderer
            printf "[DEBUG] Testing the connection with the Orderer ({{ .Values.orderer.host }}:{{ .Values.orderer.port }})\n"
            until $(nc -z {{ .Values.orderer.host }} {{ .Values.orderer.port }}); do
              printf "[DEBUG] Orderer ({{ .Values.orderer.host }}:{{ .Values.orderer.port }}) is not reacheable, retry in 5s\n"
              sleep 5
            done

            ## Add orgs to the system channel
            while true; do

              printf "[DEBUG] Creating updates for system channel '{{ .Values.systemChannel.name }}'\n"

              while IFS=" " read -r org configUrl ; do

                ## Check if system channel update has already been sent
                printf "[DEBUG] Check whether '$org' is in the system channel:\n"
                peer channel fetch config channel-$org-hasjoined.block -c {{ .Values.systemChannel.name }} -o {{ .Values.orderer.host }}:{{ .Values.orderer.port }} --tls --clientauth --cafile /var/hyperledger/msp/cacerts/cacert.pem --keyfile /var/hyperledger/tls/client/pair/tls.key --certfile /var/hyperledger/tls/client/pair/tls.crt
                configtxlator proto_decode --input channel-$org-hasjoined.block --type common.Block | jq .data.data[0].payload.data.config > channel-$org-hasjoined.json
                if grep "$org" channel-$org-hasjoined.json > /dev/null; then
                  printf "[DEBUG]   '$org' is in the system channel\n"
                  sleep 5
                  continue
                else
                  printf "[DEBUG]   '$org' is NOT in the system channel\n"
                  ## Remove all configuration files because of edge cases (network issue, proposal issue).
                  ## We prefer to delete all and retry all steps to avoid side effects.
                  rm -f *-$org.*
                fi

                ## Fetch system channel configuration block
                until [ -f "channel-$org.block" ] && [ -s "channel-$org.block" ]; do
                  printf "[DEBUG] Fetching the system channel ({{ .Values.systemChannel.name }}) configuration block\n"
                  peer channel fetch config channel-$org.block -c {{ .Values.systemChannel.name }} -o {{ .Values.orderer.host }}:{{ .Values.orderer.port }} --tls --clientauth --cafile /var/hyperledger/msp/cacerts/cacert.pem --keyfile /var/hyperledger/tls/client/pair/tls.key --certfile /var/hyperledger/tls/client/pair/tls.crt
                  sleep 3
                done

                ## Extract system channel configuration
                until [ -f "channelold-$org.block" ] && [ -s "channelold-$org.block" ]; do
                  printf "[DEBUG] Extract the system channel configuration part\n"
                  configtxlator proto_decode --input channel-$org.block --type common.Block | jq .data.data[0].payload.data.config > channelconfig-$org.json
                  configtxlator proto_encode --input channelconfig-$org.json --type common.Config --output channelold-$org.block
                  sleep 2
                done

                ## Fetch organization configuration
                until [ -f "configOrg-$org.json" ] && [ -s "configOrg-$org.json" ]; do
                  printf "[DEBUG] Fetch the organization ($org) configuration from $configUrl\n"
                  curl -L --output ./configOrg-$org.json $configUrl
                  sleep 3
                done

                ## Create proposal
                until [ -f "proposal-$org.pb" ]; do
                  printf "[DEBUG] Create system channel update proposal for $org\n"

                  ## Add organization to consortium
                  jq -s '.[0] * {"channel_group":{"groups":{"Consortiums":{"groups":{"SampleConsortium":{"groups":{"'$org'":.[1]}}}}}}}' channelconfig-$org.json configOrg-$org.json > channelconfigUpdated-$org.json
                  configtxlator proto_encode --input channelconfigUpdated-$org.json --type common.Config --output channelupdate-$org.block

                  ## Compute update between channel old configuration and the updated one
                  configtxlator compute_update --channel_id {{ .Values.systemChannel.name }} --original channelold-$org.block --updated channelupdate-$org.block | configtxlator proto_decode --type common.ConfigUpdate | jq . > compute_update-$org.json

                  ## Create update proposal
                  echo '{"payload":{"header":{"channel_header":{"channel_id": "{{ .Values.systemChannel.name }}", "type":2}},"data":{"config_update":'$(cat compute_update-$org.json)'}}}' | jq . > proposal-$org.json
                  configtxlator proto_encode --input proposal-$org.json --type common.Envelope --output proposal-$org.pb

                  sleep 2
                done

                ## Submit proposal
                until $(grep "$org" channelconfignew-$org.json > /dev/null 2> /dev/null); do

                  printf "[DEBUG] Send system channel update proposal for $org\n"
                  peer channel update -f proposal-$org.pb -c {{ .Values.systemChannel.name }} -o {{ .Values.orderer.host }}:{{ .Values.orderer.port }} --tls --clientauth --cafile /var/hyperledger/msp/cacerts/cacert.pem --keyfile /var/hyperledger/tls/client/pair/tls.key --certfile /var/hyperledger/tls/client/pair/tls.crt

                  sleep 2

                  printf "[DEBUG] Fetch system channel configuration to check the update for $org\n"
                  peer channel fetch config channelnew-$org.block -c {{ .Values.systemChannel.name }} -o {{ .Values.orderer.host }}:{{ .Values.orderer.port }} --tls --clientauth --cafile /var/hyperledger/msp/cacerts/cacert.pem --keyfile /var/hyperledger/tls/client/pair/tls.key --certfile /var/hyperledger/tls/client/pair/tls.crt
                  configtxlator proto_decode --input channelnew-$org.block --type common.Block | jq .data.data[0].payload.data.config > channelconfignew-$org.json

                  sleep 5
                done

              done < /config/system-organizations

              sleep 10
            done
        resources:
          {{- toYaml .Values.resources | nindent 14 }}
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        - name: GODEBUG
          value: "netdns=go+1"
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /config
            name: system-organizations
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
          {{- if .Values.privateCa.enabled }}
          - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
            name: private-ca
            subPath: {{ .Values.privateCa.configMap.fileName }}
          {{- end }}
      volumes:
        - name: system-organizations
          configMap:
            name: {{ template "substra.fullname" . }}-system-organizations
        - name: fabric-config
          configMap:
            name: {{ template "substra.fullname" . }}-fabric
        - name: id-cert
          secret:
            secretName: {{ .Values.orderer.secrets.ord.cert }}
        - name: id-key
          secret:
            secretName: {{ .Values.orderer.secrets.ord.key }}
        - name: cacert
          secret:
            secretName: {{ .Values.orderer.secrets.ord.caCert }}
        - name: tls
          secret:
            secretName: {{ .Values.orderer.secrets.ord.tls }}
        - name: tls-rootcert
          secret:
            secretName: {{ .Values.orderer.secrets.ord.tlsRootCert }}
        - name: tls-client
          secret:
            secretName: {{ .Values.orderer.secrets.ord.tlsClient }}
        - name: tls-clientrootcert
          secret:
            secretName: {{ .Values.orderer.secrets.ord.tlsClientRootCert }}
        - name: admin-cert
          secret:
            secretName: {{ .Values.orderer.secrets.adminCert }}
        - name: admin-key
          secret:
            secretName: {{ .Values.orderer.secrets.adminKey }}
        {{- if .Values.privateCa.enabled }}
        - name: private-ca
          configMap:
            name: {{ .Values.privateCa.configMap.name }}
        {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
---
{{- end }}
